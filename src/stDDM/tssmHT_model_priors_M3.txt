model {

    # Mean estimates of the linear regressions

        b1.mu ~ dnorm(0, 1) # td: taste

        b2.mu ~ dnorm(0, 1) # hd: health

	# precisions for the linear regression estimates

        b1.pr ~ dgamma(1, 0.1)

        b2.pr ~ dgamma(1, 0.1)

      
	# mean estimates DDM parameters

        alpha.mu ~ dunif(0.001, 5) # boundary 

        theta.mu ~ dunif(0, 10) # non decision times


	# Error terms for nDT

        alpha.pr ~ dgamma(1, 0.1) 

        theta.pr ~ dgamma(1, 0.1)


    # error term for the regression function

        e.sG <- pow(e.m,2) / pow(e.d,2)

        e.rG <- e.m / pow(e.d,2)

        e.m ~ dgamma(1,0.2)T(0.001,20)

        e.d ~ dgamma(1,0.5)T(0.001,20)


    # Bias of the DDM

        bias.alpha <- bias.mu * bias.kappa

        bias.beta <- (1 - bias.mu) * bias.kappa

        bias.mu ~ dbeta(2, 2)T(0.01,0.99)

        bias.kappa ~ dgamma(1, 0.5)


    # timeIn of the DDM

        time.mu ~ dnorm(0, 1)

        time.pr ~ dgamma(1, 0.01)


    for (p in 1:ns) { # subject level

        e.p.tau[p] ~ dgamma(e.sG, e.rG)T(0.001,20)

        alpha.p[p] ~ dnorm(alpha.mu, alpha.pr)

        bias[p] ~ dbeta(bias.alpha, bias.beta)T(0.01,0.99)

        theta.p[p] ~ dnorm(theta.mu, theta.pr)

        for (c in 1:nc) { # condition level
            b1.p[p,c] ~ dnorm(b1.mu, b1.pr)

            b2.p[p,c] ~ dnorm(b2.mu, b2.pr)

            time.p[p,c] ~ dnorm(time.mu, time.pr)
        }
    }

    for (i in 1:N) { # trial level

        y[i] ~ dwiener(bound[i] , tau[i], bet[i], w[i]) 
        
        # generate likelihood
        log_lik[i] <- dlogwiener(y[i], bound[i], tau[i], bet[i], w[i]) 

        # generate predictions
        y_pred[i] ~ dwiener(bound[i] , tau[i], bet[i], w[i])
        
        # generate trial-by-trial boundary
        bound[i] <- alpha.p[idxP[i]]

        # generate trial-by-trial nDT
          tau[i] <- theta.p[idxP[i]]
          dT[i] <- rt[i] - tau[i]

        # generate trial-by-trial Bias
          bet[i] <- bias[idxP[i]]

        # The actual drift rate
          w[i] ~ dnorm(li.hat[i], e.p.tau[ idxP[i] ])

        # rt minus timeHin
          timeStep[i] <- (dT[i] - timeIn[i])/dT[i]    #time is a weighted variable depending when the health or taste come first
          smaller[i] <- step(timeStep[i])             #if smaller==0 either health or taste doesnt get in

        li.hat_t[i] <- (1-f[i]) * vd_t[i] +   f[i]   * ( smaller[i] * timeStep[i] * vd_t[i] )
        li.hat_h[i] <-    f[i]  * vd_h[i] + (1-f[i]) * ( smaller[i] * timeStep[i] * vd_h[i] )

        li.hat[i] <- li.hat_t[i] + li.hat_h[i]

        # The linear regression of the value probabilities and value magnitude
        vd_t[i] <-  (b1.p[ idxP[i], cond[i] ] * td[i]) # taste
        vd_h[i] <-  (b2.p[ idxP[i], cond[i] ] * hd[i]) # health

        time[i] <- time.p[idxP[i], cond[i]]
        timeIn[i] <- abs(time[i]) 
        f[i] <- step(time[i])

    }
}

